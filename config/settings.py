"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
import cloudinary
from pathlib import Path

import django_heroku
from decouple import config
import dj_database_url
import datetime
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.redis import RedisIntegration

# from dotenv import load_dotenv
# load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config(
    "SECRET_KEY", default="vxs3#i0!%ph5qzr8+eco8cw55+&18q$bre5ag&axo&d%x^xsvc"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]
ALLOWED_HOSTS = config("ALLOWED_HOSTS", default="*,localhost".split(","))
APPEND_SLASH = False

ENV = config("ENV", default="local")
BACKEND_URL = config("BACKEND_URL", default="0.0.0.0:8000")
VFD_BEARER_TOKEN = config("VFD_BEARER_TOKEN", default="")
# Keys Configs
IS_PROD_ENV = ENV == "production"
CLOUDINARY_CLOUD_NAME = config("CLOUDINARY_CLOUD_NAME")
CLOUDINARY_API_KEY = config("CLOUDINARY_API_KEY")
CLOUDINARY_API_SECRET = config("CLOUDINARY_API_SECRET")

cloudinary.config(
    cloud_name=CLOUDINARY_CLOUD_NAME,
    api_key=CLOUDINARY_API_KEY,
    api_secret=CLOUDINARY_API_SECRET,
)

# Application definition

INSTALLED_APPS = [
    "scout_apm.django",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "debug_toolbar",
    "channels",
    "cachalot",
    "fcm_django",
    "rest_framework",
    "userservice.apps.UserserviceConfig",
    "transactionservice.apps.TransactionserviceConfig",
    "paymentservice.apps.PaymentserviceConfig",
]

MIDDLEWARE = [
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


INTERNAL_IPS = [
    "127.0.0.1",
]

ROOT_URLCONF = "config.urls"

DEFAULT_RENDERER_CLASSES = ("rest_framework.renderers.JSONRenderer",)

if DEBUG:
    DEFAULT_RENDERER_CLASSES = DEFAULT_RENDERER_CLASSES + (
        "rest_framework.renderers.BrowsableAPIRenderer",
    )

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "userservice.authentication.JSONWebTokenAuthentication",
    ),
    "DEFAULT_RENDERER_CLASSES": DEFAULT_RENDERER_CLASSES,
    "DEFAULT_PERMISSION_CLASSES": ("userservice.permissions.IsTokenBlackListed",),
    "DATETIME_FORMAT": "%Y-%m-%dT%H:%M:%S.%fZ",
    "DATETIME_INPUT_FORMATS": [
        "%Y-%m-%d %H:%M:%S",
    ],
}

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


# Scout settings
SCOUT_MONITOR = config("SCOUT_MONITOR", cast=bool, default=True)
SCOUT_KEY = config("SCOUT_KEY")
SCOUT_NAME = "CashExchange"

# WSGI_APPLICATION = 'config.wsgi.application'
ASGI_APPLICATION = "config.routing.application"


# Base User
AUTH_USER_MODEL = "userservice.User"

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {}
DATABASES["default"] = dj_database_url.config(
    default=config("DATABASE_URL"),
    ssl_require=config("SSL_REQUIRE", cast=bool, default=False),
)

# Caches
REDIS_CONNECTION_URL = config("REDIS_URL")
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_CONNECTION_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

# FCM Django
FCM_DJANGO_SETTINGS = {
    "FCM_SERVER_KEY": config("FCM_SERVER_KEY", default=""),
    "DELETE_INACTIVE_DEVICES": True,
}

# Cachealot Package Setting
CACHALOT_TIMEOUT = 60
CACHALOT_ENABLED = False
# CACHALOT_ENABLED = (config("CACHE_QUERY", default=False, cast=bool),)
# CACHALOT_CACHE_RANDOM = True

# Channel Layer
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [REDIS_CONNECTION_URL],
        },
    },
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Celery Settings
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE
CELERY_BROKER_URL = CELERY_RESULT_BACKEND = REDIS_CONNECTION_URL

# VFD Settings
VFD_BASE_URL = config("VFD_BASE_URL")
VFD_BEARER_TOKEN = config("VFD_BEARER_TOKEN")
VFD_SECRET_KEY = config("VFD_SECRET_KEY")

# ONEPIPE
ONEPIPE_BASE_URL = config("ONEPIPE_BASE_URL", default="https://api.onepipe.io")
ENCRYPT_SERVICE_ENDPOINT = config(
    "ENCRYPT_SERVICE_ENDPOINT", default="http://localhost:3000/api/v1/encrypt-card"
)
ONEPIPE_API_KEY = config("ONEPIPE_API_KEY")
ONEPIPE_SECRET_KEY = config("ONEPIPE_SECRET_KEY")

# SMS
SMS_USER = config("SMS_USER")
SMS_PASSWORD = config("SMS_PASSWORD")

# JWT SETTINGS
JWT_SETTINGS = {
    "ISS_AT": lambda: datetime.datetime.utcnow(),
    "EXP_AT": lambda: datetime.datetime.utcnow() + datetime.timedelta(days=2),
}

# Distance Matrix Keys
OSRM_BASE_URL = config("OSRM_BASE_URL", default="https://router.project-osrm.org")
DISTANCE_MATRIX_KEY = config("DISTANCE_MATRIX_KEY")


# Sentry
if ENV.lower() in ["production", "staging", "dev"]:
    sentry_sdk.init(
        dsn=config("SENTRY_DSN"),
        integrations=[DjangoIntegration(), RedisIntegration()],
        traces_sample_rate=1.0,
        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True,
    )


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"


# Email
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = config("EMAIL_HOST", default="smtp.gmail.com")
EMAIL_HOST_USER = config("EMAIL_HOST_USER", default="")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD", default="")
EMAIL_PORT = 587
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = f"Cash Exchange <{config('DEFAULT_FROM_EMAIL')}>"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
        },
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": "sql.log",
        },
    },
    "loggers": {
        "django.db": {
            "level": "DEBUG",
            "handlers": ["file"],
        },
        "django.request": {
            "level": "DEBUG",
            "handlers": ["console"],
        },
    },
}

if ENV.lower() == "heroku":
    django_heroku.settings(locals())
